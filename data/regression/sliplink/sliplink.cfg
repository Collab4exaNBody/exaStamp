includes:
  - rng.cfg

configuration:
  # additional plugins to load
  +plugins:
    - microStampMolecule
    - microStampSliplink
  logging:
    parallel: false
    debug: true
#  profiling:
#    vite: sliplink.paje
  debug:
    filter: [ ".*\\.sliplink_check_bonds" , ".*\\.sliplink_analytics" ]
    graph: true
    graph_lod: 0

grid_flavor: grid_flavor_full

# atoms descriptions
species:
  - Bead:
      mass: 1.0
      z: 0
      charge: 0 e-

global:
  dt: 0.0 # automatically computed by sliplink_param_init
  timestep: 0
  simulation_end_iteration: 100
  simulation_log_frequency: 10
  rcut_inc: 10.0 ang
  rcut_max: 0.0
  bond_max_stretch: 0.5

update_particle_neighbors:
#  - compute_primary_neighbors
#  - compute_dual_neighbors
  - resize_particle_locks

domain:
  cell_size: 40.0 ang
  bounds: [ [0,0,0] , [ 200.0 ang , 200.0 ang , 200.0 ang ] ]
  periodic: [true,true,true]

sliplink_param_init:
  number_of_chains: 1000
  beads_per_chain: 100
  number_of_sliplinks: 1000
#  number_of_fillers: 1000
  beta: 1.0
  Ns: 0.5
  KBT: 1.0
  ksi: 1.0
  h1: 0.01
  sigma_rcut_scale: 5.0

# no force computation
compute_force:
  - sliplink_bond_stretch
  - sliplink_sl_force

sl_init_particles:
  rebind: { grid: sl_grid , backup_r: sl_backup_r , ghost_comm_scheme: sl_ghost_comm_scheme , otb_particles: sl_otb_particles }
  body:
  - migrate_cell_particles
  - backup_r
  - ghost_comm_scheme
  - ghost_update_all_no_fv

+parallel_update_particles:
  - particle_id_map

# add sl_parallel_update_particles to init_particles block
+init_particles:
  - sliplink_check_bonds  
  - sl_init_particles
  - sliplink_check_sl  


################ Move beads and SLs if one or the other needs to be moved ##################
trigger_move_beads:
  rebind: { threshold: max_displ , result: trigger_move_beads }
  body:
    - particle_displ_over

trigger_move_sliplinks:
  rebind: { backup_r: sl_backup_r, grid: sl_grid, threshold: max_displ , result: trigger_move_sliplinks }
  body:
    - particle_displ_over

trigger_move_combine:
  rebind: { in1: trigger_move_beads , in2: trigger_move_sliplinks , result: trigger_move_particles }
  body:
    - boolean_or

trigger_move_particles:
  - trigger_move_beads
  - trigger_move_sliplinks
  - trigger_move_combine



# define actions to update sliplinks after they moved across cells
do_update_sliplinks:
  rebind: { grid: sl_grid , backup_r: sl_backup_r , ghost_comm_scheme: sl_ghost_comm_scheme , otb_particles: sl_otb_particles }
  body:
    - move_particles
    - migrate_cell_particles
    - backup_r
    - ghost_comm_scheme
    - ghost_update_all_no_fv

sl_ghost_update_r:
  rebind: { grid: sl_grid, ghost_comm_scheme: sl_ghost_comm_scheme }
  body:
    - ghost_update_r

+update_particles_full_body:
  - do_update_sliplinks

+update_particles_fast_body:
  - sl_ghost_update_r

sliplink_bead_friction:
  rebind: { sigma: bead_friction_sigma }
  body:
    - gaussian_noise_r

numerical_scheme_sliplink:
  - check_and_update_particles
  - zero_force_energy
  - compute_force
  - sliplink_sl_move
  - push_f_r: { dt_scale: 1.0 }
  - sliplink_bead_friction

# choose and overdamped numerical scheme
numerical_scheme: numerical_scheme_sliplink

first_iteration:
  - init_particles
  - zero_force_energy
  - compute_force
  - force_to_accel
  - sliplink_analytics: { lb_flag: false , move_flag: false , print_header: true }
  - next_time_step


# define how to print log
print_log_if_triggered:
  rebind: { lb_flag: trigger_load_balance , move_flag: trigger_move_particles }
  condition: trigger_print_log
  body:
    - sliplink_analytics: { print_header: false }

final_dump: nop

simulation: simulation_sliplink

######## simulation program description #################
simulation_sliplink:
  - print_logo_banner
  - global
  - domain
  - domain_update
  - species
  - grid_flavor
  - sliplink_param_init
  - molecule_check_domain
  - nbh_dist: { verbose: true }
  - sliplink_chain_init
  - particle_id_map
  - sliplink_sl_init
  - first_iteration
  - compute_loop:
      loop: true
      condition: compute_loop_continue
      body:
        - numerical_scheme
        - end_iteration
        - compute_loop_stop
  - simulation_epilog

